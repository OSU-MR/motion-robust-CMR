classdef UnifEstimIn < EstimIn
    %UnifEstimIn:  Uniform scalar input estimation function (MAP case)
    
    properties 
        %endpoints for which p(x) = const
        a    % minimum  
        b;   % maximum

    end
    
    methods
        % Constructor
        function obj = UnifEstimIn(a,b)
            obj = obj@EstimIn;
            if nargin ~= 0 % Allow nargin == 0 syntax
                obj.a = a;
                obj.b = b;
                
            end
        end

        % endpoints of uniform prior
        function [umean0, uvar0, valInit] = estimInit(obj)
            if obj.a == -inf || obj.b == inf
                umean0 = max(min(0,obj.b),obj.a);
                uvar0 = 1;
            else
                umean0 = (obj.a +obj.b)/2;
                uvar0 = (obj.b-obj.a)/12;
            end
            valInit = 0;
        end

        % Uniform estimation function
        function [umean, uvar, val] = estim(obj, Rhat, Rvar)
            
            % Compute MAP mean and variance parameter
            umean = Rhat;
            umean(Rhat <= obj.a) = obj.a;
            umean(Rhat >= obj.b) = obj.b;
            uvar = Rvar;
            uvar(umean == obj.a | umean == obj.b) = 0;
            
            if (nargout >= 3)                            
                val = 1./(obj.b-obj.a).*ones(size(Rhat));
            end

        end
        
        % Generate random samples
        function x = genRand(obj, outSize)
            if isscalar(outSize)
                x = obj.a + (obj.b-obj.a).*rand(outSize,1);
            else
                x = obj.a + (obj.b-obj.a).*rand(outSize);
            end
        end
        
        % Computes the likelihood p(y) for real(y) = x + v, v = N(0,yvar)
        function py = plikey(obj,Y,Yvar)
            alpha = (obj.a - Y)./sqrt(Yvar);
            beta = (obj.b - Y)./sqrt(Yvar);
            py = (erf(beta./sqrt(2))/2 - erf(alpha./sqrt(2))/2)./(obj.b - obj.a);
        end
        
    end
    
end

